/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.jrc.mp;

import br.jrc.mp.lib.Ambiente;
import br.jrc.mp.lib.Robo;
import br.jrc.utilis.Funcoes;
import java.awt.Dimension;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.Icon;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author jrcorrea
 */
public class fraTela extends javax.swing.JFrame {
    private MyTela[][] mapAtual = null;
    private Icon[] Imagens;
    private int inTamanhoImagem=30;
    private int inAlteracaoTamanhoImagemPadrao=1;

    private Timer timerRelogio;

    void atualizar() {
        panTela.repaint();
    }

    void setLimpeza(byte[][] limpeza) {
        labLimpeza.setIcon(Funcoes.getScaledImage( Funcoes.gerarImagem(limpeza), labLimpeza.getWidth(), labLimpeza.getHeight()));
    }

    void setMapeamento(byte[][] mapeamento) {
        labMapeamento.setIcon(Funcoes.getScaledImage( Funcoes.gerarImagem(mapeamento), labMapeamento.getWidth(), labMapeamento.getHeight()));
    }
    
    class TaskAtualizarTela extends TimerTask {   
        
        public void run() {   
            
            panTela.repaint();
            
            timerRelogio.schedule(new TaskAtualizarTela(), 40);
        }        
    }   
    /**
     * Creates new form fraTela
     */
    public fraTela(MyTela[][] tela, Icon[] imagens) {
        initComponents();
        Imagens = imagens;
        prepararMapa(tela);
        timerRelogio = new Timer();
        timerRelogio.schedule(new TaskAtualizarTela(), 40);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        butZoomMenos = new javax.swing.JButton();
        butZoomMais = new javax.swing.JButton();
        panMapeamento = new javax.swing.JPanel();
        labMapeamento = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        panTela = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        labLimpeza = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mapa em Execução");
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });

        jToolBar1.setRollover(true);
        jToolBar1.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jToolBar1.setPreferredSize(new java.awt.Dimension(100, 30));

        butZoomMenos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/zoom-.png"))); // NOI18N
        butZoomMenos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        butZoomMenos.setFocusable(false);
        butZoomMenos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        butZoomMenos.setMargin(null);
        butZoomMenos.setMaximumSize(null);
        butZoomMenos.setMinimumSize(null);
        butZoomMenos.setPreferredSize(new java.awt.Dimension(24, 24));
        butZoomMenos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butZoomMenosActionPerformed(evt);
            }
        });
        jToolBar1.add(butZoomMenos);

        butZoomMais.setIcon(new javax.swing.ImageIcon(getClass().getResource("/zoom.png"))); // NOI18N
        butZoomMais.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        butZoomMais.setFocusable(false);
        butZoomMais.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        butZoomMais.setMargin(null);
        butZoomMais.setMaximumSize(null);
        butZoomMais.setMinimumSize(null);
        butZoomMais.setPreferredSize(new java.awt.Dimension(24, 24));
        butZoomMais.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        butZoomMais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butZoomMaisActionPerformed(evt);
            }
        });
        jToolBar1.add(butZoomMais);

        panMapeamento.setBorder(javax.swing.BorderFactory.createTitledBorder("Mapeamento Atual"));
        panMapeamento.setPreferredSize(new java.awt.Dimension(385, 385));

        labMapeamento.setBackground(new java.awt.Color(255, 255, 51));

        javax.swing.GroupLayout panMapeamentoLayout = new javax.swing.GroupLayout(panMapeamento);
        panMapeamento.setLayout(panMapeamentoLayout);
        panMapeamentoLayout.setHorizontalGroup(
            panMapeamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labMapeamento, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
        );
        panMapeamentoLayout.setVerticalGroup(
            panMapeamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labMapeamento, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Mapa"));

        panTela.setBackground(new java.awt.Color(255, 255, 255));
        panTela.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                panTelaComponentResized(evt);
            }
        });
        panTela.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                panTelaAncestorResized(evt);
            }
        });

        javax.swing.GroupLayout panTelaLayout = new javax.swing.GroupLayout(panTela);
        panTela.setLayout(panTelaLayout);
        panTelaLayout.setHorizontalGroup(
            panTelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 851, Short.MAX_VALUE)
        );
        panTelaLayout.setVerticalGroup(
            panTelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 612, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(panTela);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Mapeamento Histórico"));
        jPanel2.setPreferredSize(new java.awt.Dimension(385, 385));

        labLimpeza.setBackground(new java.awt.Color(255, 255, 51));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(labLimpeza, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 228, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(labLimpeza, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panMapeamento, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panMapeamento, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butZoomMaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butZoomMaisActionPerformed
        if (inTamanhoImagem<100){
            inTamanhoImagem += inAlteracaoTamanhoImagemPadrao;
            redezenharMapa();
        }
    }//GEN-LAST:event_butZoomMaisActionPerformed

    private void butZoomMenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butZoomMenosActionPerformed
       if (inTamanhoImagem>10) {
            inTamanhoImagem -= inAlteracaoTamanhoImagemPadrao;            
            redezenharMapa();
       }
    }//GEN-LAST:event_butZoomMenosActionPerformed

    private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized
  
    }//GEN-LAST:event_formAncestorResized

    private void panTelaAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_panTelaAncestorResized
        

    }//GEN-LAST:event_panTelaAncestorResized

    private void panTelaComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_panTelaComponentResized
        if (mapAtual==null) return;
        
        int inQtdLinhas = mapAtual.length;
        int inQtdColunas = mapAtual[0].length;
        
        int altura = (int) ((panTela.getHeight()*0.99)/inQtdLinhas);
        int largura = (int) ((panTela.getWidth()*0.99)/inQtdColunas);                        
                
        if (altura<largura){
            inTamanhoImagem = altura;
        }else{
            inTamanhoImagem = largura;
        }
        
        redezenharMapa();
    }//GEN-LAST:event_panTelaComponentResized

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butZoomMais;
    private javax.swing.JButton butZoomMenos;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel labLimpeza;
    private javax.swing.JLabel labMapeamento;
    private javax.swing.JPanel panMapeamento;
    private javax.swing.JPanel panTela;
    // End of variables declaration//GEN-END:variables

    public JPanel getObjetoMapa() {
        return panTela;
    }
    
    public  MyTela[][] getMapa(){
        return mapAtual;
    }
     
    private void prepararMapa(MyTela[][] tela){
        panTela.removeAll();
                                      
        int inQtdLinhas = tela.length;
        int inQtdColunas = tela[0].length;
        
        int altura = (int) ((panTela.getHeight()*0.99)/inQtdLinhas);
        int largura = (int) ((panTela.getWidth()*0.99)/inQtdColunas);                        
                
        if (altura<largura){
            inTamanhoImagem = altura;
        }else{
            inTamanhoImagem = largura;
        }
        
        panTela.setPreferredSize(new Dimension( (inTamanhoImagem * inQtdColunas) ,(inTamanhoImagem * inQtdLinhas) ));                                          
        
        mapAtual = new MyTela[inQtdLinhas][inQtdColunas]; 
        
        for (int i=0;i<inQtdLinhas; i++)            
            for (int j=0;j<inQtdColunas;j++){
                mapAtual[i][j] = new MyTela(Imagens);                                                                   
                mapAtual[i][j].setBounds( (j*inTamanhoImagem), (i*inTamanhoImagem), inTamanhoImagem,inTamanhoImagem);  
                mapAtual[i][j].setImagem(tela[i][j].getValor());                           
                mapAtual[i][j].setVisible(true);                
                panTela.add(mapAtual[i][j]);                 
                
            }
        
        panTela.validate();
        panTela.repaint();
        
    }
    
    public JLabel getMapeamento(){
        return labMapeamento;
    }
    public JLabel getLimpeza(){
        return labLimpeza;
    }
    
    private void redezenharMapa() {
       
       int inQtdLinhas = mapAtual.length;
       int inQtdColunas = mapAtual[0].length;
        
       panTela.setPreferredSize(new Dimension( (inTamanhoImagem * inQtdColunas) ,(inTamanhoImagem * inQtdLinhas) ));                                          
                      
        for (int i=0;i<inQtdLinhas; i++)            
            for (int j=0;j<inQtdColunas;j++){                                                                            
                mapAtual[i][j].setBounds( (j*inTamanhoImagem), (i*inTamanhoImagem), inTamanhoImagem,inTamanhoImagem);                                                 
                mapAtual[i][j].setIcon(Funcoes.getScaledImage(Imagens[mapAtual[i][j].getValor()], inTamanhoImagem, inTamanhoImagem));
            }
        
        panTela.validate();
        panTela.repaint();
        
    }
}
